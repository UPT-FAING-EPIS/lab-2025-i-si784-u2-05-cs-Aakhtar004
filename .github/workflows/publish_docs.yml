name: 2. Publish Documentation

env:
  DOTNET_VERSION: '8.0'
  DOTNET_VERSION_TOOL: '6.0'

on: push

jobs:
  build-and-deploy-docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Bank

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configurando la versión de NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Compatibilidad con .NET 6
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_TOOL }}
    
    - name: Actualizar DocFx y dll2mmd  
      run: |
        dotnet tool update -g docfx
        dotnet tool update -g dll2mmd

    - name: Restore & Build project
      run: |
        dotnet restore Bank.Domain/Bank.Domain.csproj
        dotnet build Bank.Domain/Bank.Domain.csproj --configuration Release
        dotnet restore Bank.Domain.Tests/Bank.Domain.Tests.csproj
        dotnet build Bank.Domain.Tests/Bank.Domain.Tests.csproj --configuration Release

    - name: Generar diagrama de clases con dll2mmd
      run: |
        dll2mmd -f Bank.Domain/bin/Release/net8.0/Bank.Domain.dll -o clases.md
    
    - name: Generate coverage Report
      run: |
        dotnet test --collect:"XPlat Code Coverage"
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator "-reports:./*/*/*/coverage.cobertura.xml" "-targetdir:Cobertura" -reporttypes:MarkdownSummaryGithub
    
    - name: Inicializar DocFX
      run: |
          docfx init -y
    
    - name: Limpiar el directorio docs
      run: |
          rm -rf docs/*
    
    - name: Modificar archivo docfx.json
      run: |
        cat > docfx.json <<EOF
        {
          "$schema": "https://raw.githubusercontent.com/dotnet/docfx/main/schemas/docfx.schema.json",
          "metadata": [
            {
              "src": [
                {
                  "src": ".",
                  "files": [
                    "Bank.Domain/Bank.Domain.csproj"
                  ]
                }
              ],
              "dest": "docs"
            }
          ],
          "build": {
            "content": [
              {
                "files": [
                  "**/*.{md,yml}"
                ],
                "exclude": [
                  "_site/**",
                  "Cobertura/index.html",
                  "Stryker/mutation-report.html"
                ]
              }
            ],
            "resource": [
              {
                "files": [
                  "images/**"
                ]
              }
            ],
            "output": "_site",
            "template": [
              "default",
              "modern"
            ],
            "globalMetadata": {
              "_appName": "Bank.App",
              "_appTitle": "Bank App",
              "_enableSearch": true,
              "pdf": true
            }
          }
        }
        EOF
    
    - name: VER JSON
      run: cat docfx.json
    
    - name: Modificar archivo toc.yml
      run: |
        cat > toc.yml <<EOF
        - name: Docs
          href: docs/
        EOF
    
    - name: Modificar archivo index.md
      run: |
        cat > index.md <<EOF
        ---
        _layout: landing
        ---

        # This is the **HOMEPAGE**.

        ## [Reporte Cobertura HTML](Cobertura/index.html)
        
        ## [Reporte de Mutaciones](Stryker/mutation-report.html)

        ## [Documentacion de Clases, atributos y métodos](docs/Bank.Domain.html)

        ## [Diagrama de Clases](clases.md)
        EOF
    
    - name: Verificar estructura del proyecto
      run: |
        echo "=== Estructura del proyecto Bank.Domain ==="
        find Bank.Domain -name "*.cs" | head -10
        echo ""
        echo "=== Clases públicas encontradas ==="
        find Bank.Domain -name "*.cs" -exec grep -l "public class\|public interface\|public enum" {} \; || echo "❌ No se encontraron clases públicas"
        echo ""
        echo "=== Contenido del proyecto .csproj ==="
        cat Bank.Domain/Bank.Domain.csproj

    - name: Generar documentación
      run: |
        echo "=== Ejecutando docfx metadata ==="
        docfx metadata docfx.json --verbose
        echo ""
        echo "=== Verificando archivos generados después de metadata ==="
        ls -la docs/ || echo "❌ Carpeta docs vacía"
        echo ""
        echo "=== Ejecutando docfx build ==="
        docfx build docfx.json --verbose
    
    - name: Verificar archivos generados DETALLADO
      run: |
        echo "=== Contenido completo de _site ==="
        find _site -type f -name "*.html" | sort
        echo ""
        echo "=== Contenido de docs/ ==="
        ls -la docs/ || echo "❌ Carpeta docs no existe después de metadata"
        echo ""
        echo "=== Archivos YML generados ==="
        find docs/ -name "*.yml" 2>/dev/null || echo "❌ No se encontraron archivos YML"
        echo ""
        echo "=== Verificando docs/Bank.Domain.html ==="
        ls -la _site/docs/ || echo "❌ Carpeta _site/docs no encontrada"
        test -f _site/docs/Bank.Domain.html && echo "✅ Bank.Domain.html encontrado" || echo "❌ Bank.Domain.html NO encontrado"

    - name: DIAGNÓSTICO COMPLETO - Verificar generación de archivos
      run: |
        echo "🔍 === DIAGNÓSTICO COMPLETO ==="
        echo ""
        echo "📁 === 1. ESTRUCTURA ACTUAL DEL PROYECTO ==="
        ls -la
        echo ""
        echo "📊 === 2. VERIFICAR REPORTE DE COBERTURA LOCAL ==="
        if [ -d "Cobertura" ]; then
          echo "✅ Carpeta Cobertura existe"
          ls -la Cobertura/
          if [ -f "Cobertura/index.html" ]; then
            echo "✅ index.html encontrado - Tamaño: $(du -h Cobertura/index.html)"
            echo "📝 Primeras 10 líneas:"
            head -10 Cobertura/index.html
          else
            echo "❌ index.html NO encontrado"
          fi
        else
          echo "❌ Carpeta Cobertura NO existe"
        fi
        echo ""
        echo "🏗️ === 3. VERIFICAR CONSTRUCCIÓN DocFX ==="
        if [ -d "_site" ]; then
          echo "✅ Carpeta _site existe"
          echo "📁 Contenido de _site:"
          find _site -type f | head -20
          echo ""
          echo "🔍 Buscar archivos HTML específicos:"
          find _site -name "*.html" -exec basename {} \; | sort | uniq
        else
          echo "❌ Carpeta _site NO existe"
        fi
        echo ""
        echo "📋 === 4. VERIFICAR ARCHIVOS YAML DE METADATA ==="
        if [ -d "docs" ]; then
          echo "✅ Carpeta docs existe"
          find docs -name "*.yml" -o -name "*.yaml" | head -10
        else
          echo "❌ Carpeta docs NO existe"
        fi
        echo ""
        echo "🎯 === 5. VERIFICAR ENLACES ESPECÍFICOS ==="
        echo "Buscando archivos que deberían existir:"
        test -f "_site/Cobertura/index.html" && echo "✅ _site/Cobertura/index.html" || echo "❌ _site/Cobertura/index.html"
        test -f "_site/docs/Bank.Domain.html" && echo "✅ _site/docs/Bank.Domain.html" || echo "❌ _site/docs/Bank.Domain.html"
        test -f "_site/clases.html" && echo "✅ _site/clases.html" || echo "❌ _site/clases.html"
        test -f "_site/index.html" && echo "✅ _site/index.html" || echo "❌ _site/index.html"
        echo ""
        echo "📤 === 6. SIMULAR PUBLICACIÓN ==="
        echo "Archivos que se publicarían en GitHub Pages:"
        if [ -d "_site" ]; then
          find _site -type f -name "*.html" | wc -l | xargs echo "Total archivos HTML:"
          find _site -type f | head -30
        fi
        echo ""
        echo "🔗 === 7. VERIFICAR ENLACES EN INDEX ==="
        if [ -f "_site/index.html" ]; then
          echo "Enlaces encontrados en index.html:"
          grep -o 'href="[^"]*"' _site/index.html || echo "No se encontraron enlaces"
        fi

    - name: Publicar en GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: Bank/_site
        publish_branch: gh-pages
        destination_dir: docs
        keep_files: true